// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAPhantomHapticInterface::Enable_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAPhantomHapticInterface *> (servant);
  POA_CORBAHapticInterface::Enable_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAPhantomHapticInterface::Disable_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAPhantomHapticInterface *> (servant);
  POA_CORBAHapticInterface::Disable_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAPhantomHapticInterface::Terminate_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAPhantomHapticInterface *> (servant);
  POA_CORBAHapticInterface::Terminate_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAPhantomHapticInterface::ReturnHapticInterfaceIdentifier_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAPhantomHapticInterface *> (servant);
  POA_CORBAHapticInterface::ReturnHapticInterfaceIdentifier_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAPhantomHapticInterface::IsInitialized_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAPhantomHapticInterface *> (servant);
  POA_CORBAHapticInterface::IsInitialized_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAPhantomHapticInterface::IsEnabled_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAPhantomHapticInterface *> (servant);
  POA_CORBAHapticInterface::IsEnabled_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAPhantomHapticInterface::ReportUpdateRate_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAPhantomHapticInterface *> (servant);
  POA_CORBAHapticInterface::ReportUpdateRate_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAPhantomHapticInterface::ReportSamplingTime_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAPhantomHapticInterface *> (servant);
  POA_CORBAHapticInterface::ReportSamplingTime_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAPhantomHapticInterface::ReadConfiguration_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAPhantomHapticInterface *> (servant);
  POA_CORBAHapticInterface::ReadConfiguration_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAPhantomHapticInterface::UseHapticModel_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAPhantomHapticInterface *> (servant);
  POA_CORBAHapticInterface::UseHapticModel_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAMouseHapticInterface::Enable_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAMouseHapticInterface *> (servant);
  POA_CORBAHapticInterface::Enable_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAMouseHapticInterface::Disable_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAMouseHapticInterface *> (servant);
  POA_CORBAHapticInterface::Disable_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAMouseHapticInterface::Terminate_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAMouseHapticInterface *> (servant);
  POA_CORBAHapticInterface::Terminate_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAMouseHapticInterface::ReturnHapticInterfaceIdentifier_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAMouseHapticInterface *> (servant);
  POA_CORBAHapticInterface::ReturnHapticInterfaceIdentifier_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAMouseHapticInterface::IsInitialized_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAMouseHapticInterface *> (servant);
  POA_CORBAHapticInterface::IsInitialized_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAMouseHapticInterface::IsEnabled_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAMouseHapticInterface *> (servant);
  POA_CORBAHapticInterface::IsEnabled_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAMouseHapticInterface::ReportUpdateRate_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAMouseHapticInterface *> (servant);
  POA_CORBAHapticInterface::ReportUpdateRate_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAMouseHapticInterface::ReportSamplingTime_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAMouseHapticInterface *> (servant);
  POA_CORBAHapticInterface::ReportSamplingTime_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAMouseHapticInterface::ReadConfiguration_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAMouseHapticInterface *> (servant);
  POA_CORBAHapticInterface::ReadConfiguration_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAMouseHapticInterface::UseHapticModel_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticInterface * const impl = static_cast<POA_CORBAMouseHapticInterface *> (servant);
  POA_CORBAHapticInterface::UseHapticModel_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAOpenHapticsManager::StartHapticsThread_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticsManager * const impl = static_cast<POA_CORBAOpenHapticsManager *> (servant);
  POA_CORBAHapticsManager::StartHapticsThread_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAOpenHapticsManager::EndHapticsThread_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticsManager * const impl = static_cast<POA_CORBAOpenHapticsManager *> (servant);
  POA_CORBAHapticsManager::EndHapticsThread_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAOpenHapticsManager::isHapticsThreadRunning_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticsManager * const impl = static_cast<POA_CORBAOpenHapticsManager *> (servant);
  POA_CORBAHapticsManager::isHapticsThreadRunning_skel (
      server_request,
      servant_upcall,
      impl
    );
}

// TAO_IDL - Generated from
// .\be\be_interface.cpp:2033

ACE_INLINE
void
POA_CORBAOpenHapticsManager::GetNumHapticInterfaces_skel (
    TAO_ServerRequest & server_request,
    void * servant_upcall,
    void * servant
  )
{
  POA_CORBAHapticsManager * const impl = static_cast<POA_CORBAOpenHapticsManager *> (servant);
  POA_CORBAHapticsManager::GetNumHapticInterfaces_skel (
      server_request,
      servant_upcall,
      impl
    );
}

