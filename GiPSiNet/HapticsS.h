// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:487

#ifndef _TAO_IDL_HAPTICSS_H_
#define _TAO_IDL_HAPTICSS_H_

#include /**/ "ace/pre.h"

#include "HapticsC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/Collocation_Proxy_Broker.h"
#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87

class POA_CORBAHapticInterface;
typedef POA_CORBAHapticInterface *POA_CORBAHapticInterface_ptr;

class HAPTICS_COMMON_Export POA_CORBAHapticInterface
  : public virtual PortableServer::ServantBase
{
protected:
  POA_CORBAHapticInterface (void);

public:
  // Useful for template programming.
  typedef ::CORBAHapticInterface _stub_type;
  typedef ::CORBAHapticInterface_ptr _stub_ptr_type;
  typedef ::CORBAHapticInterface_var _stub_var_type;
  
  POA_CORBAHapticInterface (const POA_CORBAHapticInterface& rhs);
  virtual ~POA_CORBAHapticInterface (void);
  
  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
  
  static void _is_a_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _non_existent_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _interface_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _component_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _repository_id_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant);
  
  virtual void _dispatch (
      TAO_ServerRequest & req,
      void * servant_upcall);
  
  ::CORBAHapticInterface *_this (void);
  
  virtual const char* _interface_repository_id (void) const;
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Boolean Enable (
      void) = 0;
  
  static void Enable_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Boolean Disable (
      void) = 0;
  
  static void Disable_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Boolean Terminate (
      void) = 0;
  
  static void Terminate_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Short ReturnHapticInterfaceIdentifier (
      void) = 0;
  
  static void ReturnHapticInterfaceIdentifier_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Boolean IsInitialized (
      void) = 0;
  
  static void IsInitialized_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Boolean IsEnabled (
      void) = 0;
  
  static void IsEnabled_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Double ReportUpdateRate (
      void) = 0;
  
  static void ReportUpdateRate_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Double ReportSamplingTime (
      void) = 0;
  
  static void ReportSamplingTime_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBAHapticConfiguration ReadConfiguration (
      void) = 0;
  
  static void ReadConfiguration_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Short UseHapticModel (
      const ::CORBAGiPSiLowOrderLinearHapticModel & model) = 0;
  
  static void UseHapticModel_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
};

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87

class POA_CORBAPhantomHapticInterface;
typedef POA_CORBAPhantomHapticInterface *POA_CORBAPhantomHapticInterface_ptr;

class HAPTICS_COMMON_Export POA_CORBAPhantomHapticInterface
  : public virtual POA_CORBAHapticInterface
{
protected:
  POA_CORBAPhantomHapticInterface (void);

public:
  // Useful for template programming.
  typedef ::CORBAPhantomHapticInterface _stub_type;
  typedef ::CORBAPhantomHapticInterface_ptr _stub_ptr_type;
  typedef ::CORBAPhantomHapticInterface_var _stub_var_type;
  
  POA_CORBAPhantomHapticInterface (const POA_CORBAPhantomHapticInterface& rhs);
  virtual ~POA_CORBAPhantomHapticInterface (void);
  
  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
  
  static void _is_a_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _non_existent_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _interface_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _component_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _repository_id_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant);
  
  virtual void _dispatch (
      TAO_ServerRequest & req,
      void * servant_upcall);
  
  ::CORBAPhantomHapticInterface *_this (void);
  
  virtual const char* _interface_repository_id (void) const;
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Short SetHandle (
      ::CORBA::Short handler) = 0;
  
  static void SetHandle_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Short switchModel (
      void) = 0;
  
  static void switchModel_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Short ReturnHandle (
      void) = 0;
  
  static void ReturnHandle_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  Enable_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  Disable_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  Terminate_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  ReturnHapticInterfaceIdentifier_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  IsInitialized_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  IsEnabled_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  ReportUpdateRate_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  ReportSamplingTime_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  ReadConfiguration_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  UseHapticModel_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
};

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87

class POA_CORBAMouseHapticInterface;
typedef POA_CORBAMouseHapticInterface *POA_CORBAMouseHapticInterface_ptr;

class HAPTICS_COMMON_Export POA_CORBAMouseHapticInterface
  : public virtual POA_CORBAHapticInterface
{
protected:
  POA_CORBAMouseHapticInterface (void);

public:
  // Useful for template programming.
  typedef ::CORBAMouseHapticInterface _stub_type;
  typedef ::CORBAMouseHapticInterface_ptr _stub_ptr_type;
  typedef ::CORBAMouseHapticInterface_var _stub_var_type;
  
  POA_CORBAMouseHapticInterface (const POA_CORBAMouseHapticInterface& rhs);
  virtual ~POA_CORBAMouseHapticInterface (void);
  
  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
  
  static void _is_a_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _non_existent_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _interface_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _component_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _repository_id_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant);
  
  virtual void _dispatch (
      TAO_ServerRequest & req,
      void * servant_upcall);
  
  ::CORBAMouseHapticInterface *_this (void);
  
  virtual const char* _interface_repository_id (void) const;
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  Enable_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  Disable_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  Terminate_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  ReturnHapticInterfaceIdentifier_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  IsInitialized_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  IsEnabled_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  ReportUpdateRate_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  ReportSamplingTime_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  ReadConfiguration_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  UseHapticModel_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
};

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87

class POA_CORBAHapticsManager;
typedef POA_CORBAHapticsManager *POA_CORBAHapticsManager_ptr;

class HAPTICS_COMMON_Export POA_CORBAHapticsManager
  : public virtual PortableServer::ServantBase
{
protected:
  POA_CORBAHapticsManager (void);

public:
  // Useful for template programming.
  typedef ::CORBAHapticsManager _stub_type;
  typedef ::CORBAHapticsManager_ptr _stub_ptr_type;
  typedef ::CORBAHapticsManager_var _stub_var_type;
  
  POA_CORBAHapticsManager (const POA_CORBAHapticsManager& rhs);
  virtual ~POA_CORBAHapticsManager (void);
  
  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
  
  static void _is_a_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _non_existent_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _interface_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _component_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _repository_id_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant);
  
  virtual void _dispatch (
      TAO_ServerRequest & req,
      void * servant_upcall);
  
  ::CORBAHapticsManager *_this (void);
  
  virtual const char* _interface_repository_id (void) const;
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Short StartHapticsThread (
      void) = 0;
  
  static void StartHapticsThread_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Short EndHapticsThread (
      void) = 0;
  
  static void EndHapticsThread_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Boolean isHapticsThreadRunning (
      void) = 0;
  
  static void isHapticsThreadRunning_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::CORBA::Short GetNumHapticInterfaces (
      void) = 0;
  
  static void GetNumHapticInterfaces_skel (
      TAO_ServerRequest & server_request,
      void * servant_upcall,
      void * servant
    );
};

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:87

class POA_CORBAOpenHapticsManager;
typedef POA_CORBAOpenHapticsManager *POA_CORBAOpenHapticsManager_ptr;

class HAPTICS_COMMON_Export POA_CORBAOpenHapticsManager
  : public virtual POA_CORBAHapticsManager
{
protected:
  POA_CORBAOpenHapticsManager (void);

public:
  // Useful for template programming.
  typedef ::CORBAOpenHapticsManager _stub_type;
  typedef ::CORBAOpenHapticsManager_ptr _stub_ptr_type;
  typedef ::CORBAOpenHapticsManager_var _stub_var_type;
  
  POA_CORBAOpenHapticsManager (const POA_CORBAOpenHapticsManager& rhs);
  virtual ~POA_CORBAOpenHapticsManager (void);
  
  virtual ::CORBA::Boolean _is_a (const char* logical_type_id);
  
  static void _is_a_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _non_existent_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _interface_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _component_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant
    );
  
  static void _repository_id_skel (
      TAO_ServerRequest & req,
      void * servant_upcall,
      void * servant);
  
  virtual void _dispatch (
      TAO_ServerRequest & req,
      void * servant_upcall);
  
  ::CORBAOpenHapticsManager *_this (void);
  
  virtual const char* _interface_repository_id (void) const;
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  StartHapticsThread_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  EndHapticsThread_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  isHapticsThreadRunning_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
  
  // TAO_IDL - Generated from
  // .\be\be_interface.cpp:2033
  
  static void
  GetNumHapticInterfaces_skel (
      TAO_ServerRequest & server_request, 
      void * servant_upcall,
      void * servant
    );
};

// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:1281


#if defined (__ACE_INLINE__)
#include "HapticsS.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"
#endif /* ifndef */

