// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:381


#include "VisualizationC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "VisualizationC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:868

#if !defined (_CORBADISPLAYARRAY__ARG_TRAITS_)
#define _CORBADISPLAYARRAY__ARG_TRAITS_
  
  template<>
  class Arg_Traits<CORBADisplayArray>
    : public
        Var_Size_Arg_Traits_T<
            CORBADisplayArray,
            TAO::Any_Insert_Policy_Noop <CORBADisplayArray>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:66



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_FLOATVECTOR_CS_)
#define _FLOATVECTOR_CS_

FloatVector::FloatVector (void)
{}

FloatVector::FloatVector (
    ::CORBA::ULong max
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::Float
      >
    (max)
{}

FloatVector::FloatVector (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Float * buffer,
    ::CORBA::Boolean release
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::Float
      >
    (max, length, buffer, release)
{}

FloatVector::FloatVector (
    const FloatVector &seq
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::Float
      >
    (seq)
{}

FloatVector::~FloatVector (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_LONGVECTOR_CS_)
#define _LONGVECTOR_CS_

LongVector::LongVector (void)
{}

LongVector::LongVector (
    ::CORBA::ULong max
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::ULong
      >
    (max)
{}

LongVector::LongVector (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::ULong * buffer,
    ::CORBA::Boolean release
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::ULong
      >
    (max, length, buffer, release)
{}

LongVector::LongVector (
    const LongVector &seq
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::ULong
      >
    (seq)
{}

LongVector::~LongVector (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:66



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for CORBASKP.

CORBASKP_ptr
TAO::Objref_Traits<CORBASKP>::duplicate (
    CORBASKP_ptr p)
{
  return CORBASKP::_duplicate (p);
}

void
TAO::Objref_Traits<CORBASKP>::release (
    CORBASKP_ptr p)
{
  ::CORBA::release (p);
}

CORBASKP_ptr
TAO::Objref_Traits<CORBASKP>::nil (void)
{
  return CORBASKP::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CORBASKP>::marshal (
    const CORBASKP_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*_TAO_CORBASKP_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Short CORBASKP::setArray (
    const char * displayBufferName,
    const ::CORBADisplayArray & displayArray)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBASKP_Proxy_Broker_ == 0)
    {
      CORBASKP_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Char *>::in_arg_val _tao_displayBufferName (displayBufferName);
  TAO::Arg_Traits< ::CORBADisplayArray>::in_arg_val _tao_displayArray (displayArray);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_displayBufferName,
      &_tao_displayArray
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "setArray",
      8,
      this->the_TAO_CORBASKP_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

CORBASKP::CORBASKP (void)
 : the_TAO_CORBASKP_Proxy_Broker_ (0)
{
  this->CORBASKP_setup_collocation ();
}

void
CORBASKP::CORBASKP_setup_collocation ()
{
  if (::_TAO_CORBASKP_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_CORBASKP_Proxy_Broker_ =
        ::_TAO_CORBASKP_Proxy_Broker_Factory_function_pointer (this);
    }
}

CORBASKP::~CORBASKP (void)
{}

CORBASKP_ptr
CORBASKP::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CORBASKP>::narrow (
        _tao_objref,
        "IDL:CORBASKP:1.0",
        _TAO_CORBASKP_Proxy_Broker_Factory_function_pointer
      );
}

CORBASKP_ptr
CORBASKP::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CORBASKP>::unchecked_narrow (
        _tao_objref,
        "IDL:CORBASKP:1.0",
        _TAO_CORBASKP_Proxy_Broker_Factory_function_pointer
      );
}

CORBASKP_ptr
CORBASKP::_duplicate (CORBASKP_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CORBASKP::_tao_release (CORBASKP_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CORBASKP::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:CORBASKP:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CORBASKP::_interface_repository_id (void) const
{
  return "IDL:CORBASKP:1.0";
}

::CORBA::Boolean
CORBASKP::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:51


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CORBADisplayObjectType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBADisplayObjectType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CORBADisplayObjectType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:51


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CORBADisplayPolygonMode _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBADisplayPolygonMode & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CORBADisplayPolygonMode> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:51


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, CORBADisplayShadeMode _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, CORBADisplayShadeMode & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<CORBADisplayShadeMode> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:61


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBADisplayHeader &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.objType) &&
    (strm << _tao_aggregate.polyMode) &&
    (strm << _tao_aggregate.shadeMode) &&
    (strm << ::ACE_OutputCDR::from_char (_tao_aggregate.dataType)) &&
    (strm << _tao_aggregate.pointSize) &&
    (strm << _tao_aggregate.lineSize);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBADisplayHeader &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.objType) &&
    (strm >> _tao_aggregate.polyMode) &&
    (strm >> _tao_aggregate.shadeMode) &&
    (strm >> ::ACE_InputCDR::to_char (_tao_aggregate.dataType)) &&
    (strm >> _tao_aggregate.pointSize) &&
    (strm >> _tao_aggregate.lineSize);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_FloatVector_CPP_
#define _TAO_CDR_OP_FloatVector_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const FloatVector &_tao_sequence
  )
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    FloatVector &_tao_sequence
  )
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_FloatVector_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_LongVector_CPP_
#define _TAO_CDR_OP_LongVector_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const LongVector &_tao_sequence
  )
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    LongVector &_tao_sequence
  )
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_LongVector_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:61


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBADisplayArray &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.header) &&
    (strm << _tao_aggregate.DISPARRAY_NODESIZE) &&
    (strm << _tao_aggregate.dA_size) &&
    (strm << _tao_aggregate.iA_size) &&
    (strm << _tao_aggregate.dispArray) &&
    (strm << _tao_aggregate.indexArray) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.full));
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBADisplayArray &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.header) &&
    (strm >> _tao_aggregate.DISPARRAY_NODESIZE) &&
    (strm >> _tao_aggregate.dA_size) &&
    (strm >> _tao_aggregate.iA_size) &&
    (strm >> _tao_aggregate.dispArray) &&
    (strm >> _tao_aggregate.indexArray) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.full));
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBASKP_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBASKP_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CORBASKP RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_CORBASKP_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



