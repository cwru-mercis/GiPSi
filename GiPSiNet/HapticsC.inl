// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_array/array_ci.cpp:159

ACE_INLINE
void
TAO::Array_Traits<Position_forany>::free (
    Position_slice * _tao_slice
  )
{
  Position_free (_tao_slice);
}

ACE_INLINE
Position_slice *
TAO::Array_Traits<Position_forany>::dup (
    const Position_slice * _tao_slice
  )
{
  return Position_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Position_forany>::copy (
    Position_slice * _tao_to,
    const Position_slice * _tao_from
  )
{
  Position_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Position_forany>::zero (
    Position_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Double ();
    }
}

ACE_INLINE
Position_slice *
TAO::Array_Traits<Position_forany>::alloc (void)
{
  return Position_alloc ();
}


// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_array/array_ci.cpp:159

ACE_INLINE
void
TAO::Array_Traits<Orientation_forany>::free (
    Orientation_slice * _tao_slice
  )
{
  Orientation_free (_tao_slice);
}

ACE_INLINE
Orientation_slice *
TAO::Array_Traits<Orientation_forany>::dup (
    const Orientation_slice * _tao_slice
  )
{
  return Orientation_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Orientation_forany>::copy (
    Orientation_slice * _tao_to,
    const Orientation_slice * _tao_from
  )
{
  Orientation_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Orientation_forany>::zero (
    Orientation_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 3; ++i1)
        {
          _tao_slice[i0][i1] = ::CORBA::Double ();
        }
    }
}

ACE_INLINE
Orientation_slice *
TAO::Array_Traits<Orientation_forany>::alloc (void)
{
  return Orientation_alloc ();
}


// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ci.cpp:70

#if !defined (_CORBAHAPTICINTERFACE___CI_)
#define _CORBAHAPTICINTERFACE___CI_

ACE_INLINE
CORBAHapticInterface::CORBAHapticInterface (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc
  )
  : ::CORBA::Object (objref, _tao_collocated, servant, oc),
    the_TAO_CORBAHapticInterface_Proxy_Broker_ (0)
{
  this->CORBAHapticInterface_setup_collocation ();
}

ACE_INLINE
CORBAHapticInterface::CORBAHapticInterface (
    IOP::IOR *ior,
    TAO_ORB_Core *oc
  )
  : ::CORBA::Object (ior, oc),
    the_TAO_CORBAHapticInterface_Proxy_Broker_ (0)
{
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ci.cpp:70

#if !defined (_CORBAPHANTOMHAPTICINTERFACE___CI_)
#define _CORBAPHANTOMHAPTICINTERFACE___CI_

ACE_INLINE
CORBAPhantomHapticInterface::CORBAPhantomHapticInterface (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc
  )
  : ::CORBA::Object (objref, _tao_collocated, servant, oc),
    the_TAO_CORBAPhantomHapticInterface_Proxy_Broker_ (0)
{
  this->CORBAPhantomHapticInterface_setup_collocation ();
}

ACE_INLINE
CORBAPhantomHapticInterface::CORBAPhantomHapticInterface (
    IOP::IOR *ior,
    TAO_ORB_Core *oc
  )
  : ::CORBA::Object (ior, oc),
    the_TAO_CORBAPhantomHapticInterface_Proxy_Broker_ (0)
{
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ci.cpp:70

#if !defined (_CORBAMOUSEHAPTICINTERFACE___CI_)
#define _CORBAMOUSEHAPTICINTERFACE___CI_

ACE_INLINE
CORBAMouseHapticInterface::CORBAMouseHapticInterface (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc
  )
  : ::CORBA::Object (objref, _tao_collocated, servant, oc),
    the_TAO_CORBAMouseHapticInterface_Proxy_Broker_ (0)
{
  this->CORBAMouseHapticInterface_setup_collocation ();
}

ACE_INLINE
CORBAMouseHapticInterface::CORBAMouseHapticInterface (
    IOP::IOR *ior,
    TAO_ORB_Core *oc
  )
  : ::CORBA::Object (ior, oc),
    the_TAO_CORBAMouseHapticInterface_Proxy_Broker_ (0)
{
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ci.cpp:70

#if !defined (_CORBAHAPTICSMANAGER___CI_)
#define _CORBAHAPTICSMANAGER___CI_

ACE_INLINE
CORBAHapticsManager::CORBAHapticsManager (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc
  )
  : ::CORBA::Object (objref, _tao_collocated, servant, oc),
    the_TAO_CORBAHapticsManager_Proxy_Broker_ (0)
{
  this->CORBAHapticsManager_setup_collocation ();
}

ACE_INLINE
CORBAHapticsManager::CORBAHapticsManager (
    IOP::IOR *ior,
    TAO_ORB_Core *oc
  )
  : ::CORBA::Object (ior, oc),
    the_TAO_CORBAHapticsManager_Proxy_Broker_ (0)
{
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ci.cpp:70

#if !defined (_CORBAOPENHAPTICSMANAGER___CI_)
#define _CORBAOPENHAPTICSMANAGER___CI_

ACE_INLINE
CORBAOpenHapticsManager::CORBAOpenHapticsManager (
    TAO_Stub *objref,
    ::CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant,
    TAO_ORB_Core *oc
  )
  : ::CORBA::Object (objref, _tao_collocated, servant, oc),
    the_TAO_CORBAOpenHapticsManager_Proxy_Broker_ (0)
{
  this->CORBAOpenHapticsManager_setup_collocation ();
}

ACE_INLINE
CORBAOpenHapticsManager::CORBAOpenHapticsManager (
    IOP::IOR *ior,
    TAO_ORB_Core *oc
  )
  : ::CORBA::Object (ior, oc),
    the_TAO_CORBAOpenHapticsManager_Proxy_Broker_ (0)
{
}

#endif /* end #if !defined */

