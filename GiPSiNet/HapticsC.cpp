// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:381


#include "HapticsC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "HapticsC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:868

#if !defined (_CORBAHAPTICCONFIGURATION__ARG_TRAITS_)
#define _CORBAHAPTICCONFIGURATION__ARG_TRAITS_
  
  template<>
  class Arg_Traits<CORBAHapticConfiguration>
    : public
        Fixed_Size_Arg_Traits_T<
            CORBAHapticConfiguration,
            TAO::Any_Insert_Policy_Noop <CORBAHapticConfiguration>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:868

#if !defined (_CORBAGIPSILOWORDERLINEARHAPTICMODEL__ARG_TRAITS_)
#define _CORBAGIPSILOWORDERLINEARHAPTICMODEL__ARG_TRAITS_
  
  template<>
  class Arg_Traits<CORBAGiPSiLowOrderLinearHapticModel>
    : public
        Var_Size_Arg_Traits_T<
            CORBAGiPSiLowOrderLinearHapticModel,
            TAO::Any_Insert_Policy_Noop <CORBAGiPSiLowOrderLinearHapticModel>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_array/array_cs.cpp:109

Position_slice *
Position_dup (const Position_slice *_tao_src_array)
{
  Position_slice *_tao_dup_array =
    Position_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Position_slice *> (0);
    }
  
  Position_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Position_slice *
Position_alloc (void)
{
  Position_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Double[3], 0);
  return retval;
}

void
Position_free (
    Position_slice *_tao_slice
  )
{
  delete [] _tao_slice;
}

void 
Position_copy (
    Position_slice * _tao_to,
    const Position_slice *_tao_from
  )
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_array/array_cs.cpp:109

Orientation_slice *
Orientation_dup (const Orientation_slice *_tao_src_array)
{
  Orientation_slice *_tao_dup_array =
    Orientation_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Orientation_slice *> (0);
    }
  
  Orientation_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Orientation_slice *
Orientation_alloc (void)
{
  Orientation_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Double[3][3], 0);
  return retval;
}

void
Orientation_free (
    Orientation_slice *_tao_slice
  )
{
  delete [] _tao_slice;
}

void 
Orientation_copy (
    Orientation_slice * _tao_to,
    const Orientation_slice *_tao_from
  )
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 3; ++i1)
        {
          _tao_to[i0][i1] = _tao_from[i0][i1];
        }
    }
}

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_DOUBLEVECTOR_CS_)
#define _DOUBLEVECTOR_CS_

DoubleVector::DoubleVector (void)
{}

DoubleVector::DoubleVector (
    ::CORBA::ULong max
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::Double
      >
    (max)
{}

DoubleVector::DoubleVector (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Double * buffer,
    ::CORBA::Boolean release
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::Double
      >
    (max, length, buffer, release)
{}

DoubleVector::DoubleVector (
    const DoubleVector &seq
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::Double
      >
    (seq)
{}

DoubleVector::~DoubleVector (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:65

#if !defined (_DOUBLEMATRIX_CS_)
#define _DOUBLEMATRIX_CS_

DoubleMatrix::DoubleMatrix (void)
{}

DoubleMatrix::DoubleMatrix (
    ::CORBA::ULong max
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::Double
      >
    (max)
{}

DoubleMatrix::DoubleMatrix (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Double * buffer,
    ::CORBA::Boolean release
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::Double
      >
    (max, length, buffer, release)
{}

DoubleMatrix::DoubleMatrix (
    const DoubleMatrix &seq
  )
  : TAO::unbounded_value_sequence<
        ::CORBA::Double
      >
    (seq)
{}

DoubleMatrix::~DoubleMatrix (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:66



// TAO_IDL - Generated from 
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:66



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for CORBAHapticInterface.

CORBAHapticInterface_ptr
TAO::Objref_Traits<CORBAHapticInterface>::duplicate (
    CORBAHapticInterface_ptr p)
{
  return CORBAHapticInterface::_duplicate (p);
}

void
TAO::Objref_Traits<CORBAHapticInterface>::release (
    CORBAHapticInterface_ptr p)
{
  ::CORBA::release (p);
}

CORBAHapticInterface_ptr
TAO::Objref_Traits<CORBAHapticInterface>::nil (void)
{
  return CORBAHapticInterface::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CORBAHapticInterface>::marshal (
    const CORBAHapticInterface_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*_TAO_CORBAHapticInterface_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Boolean CORBAHapticInterface::Enable (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticInterface_Proxy_Broker_ == 0)
    {
      CORBAHapticInterface_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "Enable",
      6,
      this->the_TAO_CORBAHapticInterface_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Boolean CORBAHapticInterface::Disable (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticInterface_Proxy_Broker_ == 0)
    {
      CORBAHapticInterface_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "Disable",
      7,
      this->the_TAO_CORBAHapticInterface_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Boolean CORBAHapticInterface::Terminate (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticInterface_Proxy_Broker_ == 0)
    {
      CORBAHapticInterface_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "Terminate",
      9,
      this->the_TAO_CORBAHapticInterface_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Short CORBAHapticInterface::ReturnHapticInterfaceIdentifier (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticInterface_Proxy_Broker_ == 0)
    {
      CORBAHapticInterface_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ReturnHapticInterfaceIdentifier",
      31,
      this->the_TAO_CORBAHapticInterface_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Boolean CORBAHapticInterface::IsInitialized (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticInterface_Proxy_Broker_ == 0)
    {
      CORBAHapticInterface_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "IsInitialized",
      13,
      this->the_TAO_CORBAHapticInterface_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Boolean CORBAHapticInterface::IsEnabled (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticInterface_Proxy_Broker_ == 0)
    {
      CORBAHapticInterface_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "IsEnabled",
      9,
      this->the_TAO_CORBAHapticInterface_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Double CORBAHapticInterface::ReportUpdateRate (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticInterface_Proxy_Broker_ == 0)
    {
      CORBAHapticInterface_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Double>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ReportUpdateRate",
      16,
      this->the_TAO_CORBAHapticInterface_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Double CORBAHapticInterface::ReportSamplingTime (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticInterface_Proxy_Broker_ == 0)
    {
      CORBAHapticInterface_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Double>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ReportSamplingTime",
      18,
      this->the_TAO_CORBAHapticInterface_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBAHapticConfiguration CORBAHapticInterface::ReadConfiguration (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticInterface_Proxy_Broker_ == 0)
    {
      CORBAHapticInterface_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBAHapticConfiguration>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ReadConfiguration",
      17,
      this->the_TAO_CORBAHapticInterface_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Short CORBAHapticInterface::UseHapticModel (
    const ::CORBAGiPSiLowOrderLinearHapticModel & model)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticInterface_Proxy_Broker_ == 0)
    {
      CORBAHapticInterface_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBAGiPSiLowOrderLinearHapticModel>::in_arg_val _tao_model (model);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_model
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "UseHapticModel",
      14,
      this->the_TAO_CORBAHapticInterface_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

CORBAHapticInterface::CORBAHapticInterface (void)
 : the_TAO_CORBAHapticInterface_Proxy_Broker_ (0)
{
  this->CORBAHapticInterface_setup_collocation ();
}

void
CORBAHapticInterface::CORBAHapticInterface_setup_collocation ()
{
  if (::_TAO_CORBAHapticInterface_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_CORBAHapticInterface_Proxy_Broker_ =
        ::_TAO_CORBAHapticInterface_Proxy_Broker_Factory_function_pointer (this);
    }
}

CORBAHapticInterface::~CORBAHapticInterface (void)
{}

CORBAHapticInterface_ptr
CORBAHapticInterface::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CORBAHapticInterface>::narrow (
        _tao_objref,
        "IDL:CORBAHapticInterface:1.0",
        _TAO_CORBAHapticInterface_Proxy_Broker_Factory_function_pointer
      );
}

CORBAHapticInterface_ptr
CORBAHapticInterface::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CORBAHapticInterface>::unchecked_narrow (
        _tao_objref,
        "IDL:CORBAHapticInterface:1.0",
        _TAO_CORBAHapticInterface_Proxy_Broker_Factory_function_pointer
      );
}

CORBAHapticInterface_ptr
CORBAHapticInterface::_duplicate (CORBAHapticInterface_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CORBAHapticInterface::_tao_release (CORBAHapticInterface_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CORBAHapticInterface::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:CORBAHapticInterface:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CORBAHapticInterface::_interface_repository_id (void) const
{
  return "IDL:CORBAHapticInterface:1.0";
}

::CORBA::Boolean
CORBAHapticInterface::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for CORBAPhantomHapticInterface.

CORBAPhantomHapticInterface_ptr
TAO::Objref_Traits<CORBAPhantomHapticInterface>::duplicate (
    CORBAPhantomHapticInterface_ptr p)
{
  return CORBAPhantomHapticInterface::_duplicate (p);
}

void
TAO::Objref_Traits<CORBAPhantomHapticInterface>::release (
    CORBAPhantomHapticInterface_ptr p)
{
  ::CORBA::release (p);
}

CORBAPhantomHapticInterface_ptr
TAO::Objref_Traits<CORBAPhantomHapticInterface>::nil (void)
{
  return CORBAPhantomHapticInterface::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CORBAPhantomHapticInterface>::marshal (
    const CORBAPhantomHapticInterface_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*_TAO_CORBAPhantomHapticInterface_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Short CORBAPhantomHapticInterface::SetHandle (
    ::CORBA::Short handler)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAPhantomHapticInterface_Proxy_Broker_ == 0)
    {
      CORBAPhantomHapticInterface_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Short>::in_arg_val _tao_handler (handler);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_handler
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "SetHandle",
      9,
      this->the_TAO_CORBAPhantomHapticInterface_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Short CORBAPhantomHapticInterface::switchModel (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAPhantomHapticInterface_Proxy_Broker_ == 0)
    {
      CORBAPhantomHapticInterface_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "switchModel",
      11,
      this->the_TAO_CORBAPhantomHapticInterface_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Short CORBAPhantomHapticInterface::ReturnHandle (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAPhantomHapticInterface_Proxy_Broker_ == 0)
    {
      CORBAPhantomHapticInterface_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "ReturnHandle",
      12,
      this->the_TAO_CORBAPhantomHapticInterface_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

CORBAPhantomHapticInterface::CORBAPhantomHapticInterface (void)
 : the_TAO_CORBAPhantomHapticInterface_Proxy_Broker_ (0)
{
  this->CORBAPhantomHapticInterface_setup_collocation ();
}

void
CORBAPhantomHapticInterface::CORBAPhantomHapticInterface_setup_collocation ()
{
  if (::_TAO_CORBAPhantomHapticInterface_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_CORBAPhantomHapticInterface_Proxy_Broker_ =
        ::_TAO_CORBAPhantomHapticInterface_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBAHapticInterface_setup_collocation ();
}

CORBAPhantomHapticInterface::~CORBAPhantomHapticInterface (void)
{}

CORBAPhantomHapticInterface_ptr
CORBAPhantomHapticInterface::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CORBAPhantomHapticInterface>::narrow (
        _tao_objref,
        "IDL:CORBAPhantomHapticInterface:1.0",
        _TAO_CORBAPhantomHapticInterface_Proxy_Broker_Factory_function_pointer
      );
}

CORBAPhantomHapticInterface_ptr
CORBAPhantomHapticInterface::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CORBAPhantomHapticInterface>::unchecked_narrow (
        _tao_objref,
        "IDL:CORBAPhantomHapticInterface:1.0",
        _TAO_CORBAPhantomHapticInterface_Proxy_Broker_Factory_function_pointer
      );
}

CORBAPhantomHapticInterface_ptr
CORBAPhantomHapticInterface::_duplicate (CORBAPhantomHapticInterface_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CORBAPhantomHapticInterface::_tao_release (CORBAPhantomHapticInterface_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CORBAPhantomHapticInterface::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:CORBAHapticInterface:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:CORBAPhantomHapticInterface:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CORBAPhantomHapticInterface::_interface_repository_id (void) const
{
  return "IDL:CORBAPhantomHapticInterface:1.0";
}

::CORBA::Boolean
CORBAPhantomHapticInterface::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for CORBAMouseHapticInterface.

CORBAMouseHapticInterface_ptr
TAO::Objref_Traits<CORBAMouseHapticInterface>::duplicate (
    CORBAMouseHapticInterface_ptr p)
{
  return CORBAMouseHapticInterface::_duplicate (p);
}

void
TAO::Objref_Traits<CORBAMouseHapticInterface>::release (
    CORBAMouseHapticInterface_ptr p)
{
  ::CORBA::release (p);
}

CORBAMouseHapticInterface_ptr
TAO::Objref_Traits<CORBAMouseHapticInterface>::nil (void)
{
  return CORBAMouseHapticInterface::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CORBAMouseHapticInterface>::marshal (
    const CORBAMouseHapticInterface_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*_TAO_CORBAMouseHapticInterface_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

CORBAMouseHapticInterface::CORBAMouseHapticInterface (void)
 : the_TAO_CORBAMouseHapticInterface_Proxy_Broker_ (0)
{
  this->CORBAMouseHapticInterface_setup_collocation ();
}

void
CORBAMouseHapticInterface::CORBAMouseHapticInterface_setup_collocation ()
{
  if (::_TAO_CORBAMouseHapticInterface_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_CORBAMouseHapticInterface_Proxy_Broker_ =
        ::_TAO_CORBAMouseHapticInterface_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBAHapticInterface_setup_collocation ();
}

CORBAMouseHapticInterface::~CORBAMouseHapticInterface (void)
{}

CORBAMouseHapticInterface_ptr
CORBAMouseHapticInterface::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CORBAMouseHapticInterface>::narrow (
        _tao_objref,
        "IDL:CORBAMouseHapticInterface:1.0",
        _TAO_CORBAMouseHapticInterface_Proxy_Broker_Factory_function_pointer
      );
}

CORBAMouseHapticInterface_ptr
CORBAMouseHapticInterface::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CORBAMouseHapticInterface>::unchecked_narrow (
        _tao_objref,
        "IDL:CORBAMouseHapticInterface:1.0",
        _TAO_CORBAMouseHapticInterface_Proxy_Broker_Factory_function_pointer
      );
}

CORBAMouseHapticInterface_ptr
CORBAMouseHapticInterface::_duplicate (CORBAMouseHapticInterface_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CORBAMouseHapticInterface::_tao_release (CORBAMouseHapticInterface_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CORBAMouseHapticInterface::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:CORBAHapticInterface:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:CORBAMouseHapticInterface:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CORBAMouseHapticInterface::_interface_repository_id (void) const
{
  return "IDL:CORBAMouseHapticInterface:1.0";
}

::CORBA::Boolean
CORBAMouseHapticInterface::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for CORBAHapticsManager.

CORBAHapticsManager_ptr
TAO::Objref_Traits<CORBAHapticsManager>::duplicate (
    CORBAHapticsManager_ptr p)
{
  return CORBAHapticsManager::_duplicate (p);
}

void
TAO::Objref_Traits<CORBAHapticsManager>::release (
    CORBAHapticsManager_ptr p)
{
  ::CORBA::release (p);
}

CORBAHapticsManager_ptr
TAO::Objref_Traits<CORBAHapticsManager>::nil (void)
{
  return CORBAHapticsManager::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CORBAHapticsManager>::marshal (
    const CORBAHapticsManager_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*_TAO_CORBAHapticsManager_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Short CORBAHapticsManager::StartHapticsThread (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticsManager_Proxy_Broker_ == 0)
    {
      CORBAHapticsManager_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "StartHapticsThread",
      18,
      this->the_TAO_CORBAHapticsManager_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Short CORBAHapticsManager::EndHapticsThread (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticsManager_Proxy_Broker_ == 0)
    {
      CORBAHapticsManager_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "EndHapticsThread",
      16,
      this->the_TAO_CORBAHapticsManager_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Boolean CORBAHapticsManager::isHapticsThreadRunning (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticsManager_Proxy_Broker_ == 0)
    {
      CORBAHapticsManager_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "isHapticsThreadRunning",
      22,
      this->the_TAO_CORBAHapticsManager_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:78

::CORBA::Short CORBAHapticsManager::GetNumHapticInterfaces (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_CORBAHapticsManager_Proxy_Broker_ == 0)
    {
      CORBAHapticsManager_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Short>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "GetNumHapticInterfaces",
      22,
      this->the_TAO_CORBAHapticsManager_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

CORBAHapticsManager::CORBAHapticsManager (void)
 : the_TAO_CORBAHapticsManager_Proxy_Broker_ (0)
{
  this->CORBAHapticsManager_setup_collocation ();
}

void
CORBAHapticsManager::CORBAHapticsManager_setup_collocation ()
{
  if (::_TAO_CORBAHapticsManager_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_CORBAHapticsManager_Proxy_Broker_ =
        ::_TAO_CORBAHapticsManager_Proxy_Broker_Factory_function_pointer (this);
    }
}

CORBAHapticsManager::~CORBAHapticsManager (void)
{}

CORBAHapticsManager_ptr
CORBAHapticsManager::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CORBAHapticsManager>::narrow (
        _tao_objref,
        "IDL:CORBAHapticsManager:1.0",
        _TAO_CORBAHapticsManager_Proxy_Broker_Factory_function_pointer
      );
}

CORBAHapticsManager_ptr
CORBAHapticsManager::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CORBAHapticsManager>::unchecked_narrow (
        _tao_objref,
        "IDL:CORBAHapticsManager:1.0",
        _TAO_CORBAHapticsManager_Proxy_Broker_Factory_function_pointer
      );
}

CORBAHapticsManager_ptr
CORBAHapticsManager::_duplicate (CORBAHapticsManager_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CORBAHapticsManager::_tao_release (CORBAHapticsManager_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CORBAHapticsManager::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:CORBAHapticsManager:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CORBAHapticsManager::_interface_repository_id (void) const
{
  return "IDL:CORBAHapticsManager:1.0";
}

::CORBA::Boolean
CORBAHapticsManager::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:60

// Traits specializations for CORBAOpenHapticsManager.

CORBAOpenHapticsManager_ptr
TAO::Objref_Traits<CORBAOpenHapticsManager>::duplicate (
    CORBAOpenHapticsManager_ptr p)
{
  return CORBAOpenHapticsManager::_duplicate (p);
}

void
TAO::Objref_Traits<CORBAOpenHapticsManager>::release (
    CORBAOpenHapticsManager_ptr p)
{
  ::CORBA::release (p);
}

CORBAOpenHapticsManager_ptr
TAO::Objref_Traits<CORBAOpenHapticsManager>::nil (void)
{
  return CORBAOpenHapticsManager::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<CORBAOpenHapticsManager>::marshal (
    const CORBAOpenHapticsManager_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*_TAO_CORBAOpenHapticsManager_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

CORBAOpenHapticsManager::CORBAOpenHapticsManager (void)
 : the_TAO_CORBAOpenHapticsManager_Proxy_Broker_ (0)
{
  this->CORBAOpenHapticsManager_setup_collocation ();
}

void
CORBAOpenHapticsManager::CORBAOpenHapticsManager_setup_collocation ()
{
  if (::_TAO_CORBAOpenHapticsManager_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_CORBAOpenHapticsManager_Proxy_Broker_ =
        ::_TAO_CORBAOpenHapticsManager_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->CORBAHapticsManager_setup_collocation ();
}

CORBAOpenHapticsManager::~CORBAOpenHapticsManager (void)
{}

CORBAOpenHapticsManager_ptr
CORBAOpenHapticsManager::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CORBAOpenHapticsManager>::narrow (
        _tao_objref,
        "IDL:CORBAOpenHapticsManager:1.0",
        _TAO_CORBAOpenHapticsManager_Proxy_Broker_Factory_function_pointer
      );
}

CORBAOpenHapticsManager_ptr
CORBAOpenHapticsManager::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<CORBAOpenHapticsManager>::unchecked_narrow (
        _tao_objref,
        "IDL:CORBAOpenHapticsManager:1.0",
        _TAO_CORBAOpenHapticsManager_Proxy_Broker_Factory_function_pointer
      );
}

CORBAOpenHapticsManager_ptr
CORBAOpenHapticsManager::_duplicate (CORBAOpenHapticsManager_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
CORBAOpenHapticsManager::_tao_release (CORBAOpenHapticsManager_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
CORBAOpenHapticsManager::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:CORBAHapticsManager:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:CORBAOpenHapticsManager:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* CORBAOpenHapticsManager::_interface_repository_id (void) const
{
  return "IDL:CORBAOpenHapticsManager:1.0";
}

::CORBA::Boolean
CORBAOpenHapticsManager::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_array/cdr_op_cs.cpp:178


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Position_forany &_tao_array
  )
{
  return
    strm.write_double_array (
        reinterpret_cast <const ACE_CDR::Double *> (_tao_array.in ()),
        3
      );
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Position_forany &_tao_array
  )
{
  return
    strm.read_double_array (
        reinterpret_cast <ACE_CDR::Double *> (_tao_array.out ()),
        3
      );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_array/cdr_op_cs.cpp:178


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Orientation_forany &_tao_array
  )
{
  return
    strm.write_double_array (
        reinterpret_cast <const ACE_CDR::Double *> (_tao_array.in ()),
        3*3
      );
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Orientation_forany &_tao_array
  )
{
  return
    strm.read_double_array (
        reinterpret_cast <ACE_CDR::Double *> (_tao_array.out ()),
        3*3
      );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_DoubleVector_CPP_
#define _TAO_CDR_OP_DoubleVector_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DoubleVector &_tao_sequence
  )
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DoubleVector &_tao_sequence
  )
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_DoubleVector_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_DoubleMatrix_CPP_
#define _TAO_CDR_OP_DoubleMatrix_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const DoubleMatrix &_tao_sequence
  )
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    DoubleMatrix &_tao_sequence
  )
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_DoubleMatrix_CPP_ */

// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:61


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBAHapticConfiguration &_tao_aggregate
  )
{
  Position_forany _tao_aggregate_pos
      (const_cast<
          Position_slice*> (
          _tao_aggregate.pos
        )
    );
  Orientation_forany _tao_aggregate_orient
      (const_cast<
          Orientation_slice*> (
          _tao_aggregate.orient
        )
    );
  return
    (strm << _tao_aggregate_pos) &&
    (strm << _tao_aggregate_orient) &&
    (strm << _tao_aggregate.buttonState);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBAHapticConfiguration &_tao_aggregate
  )
{
  Position_forany _tao_aggregate_pos
      (const_cast<
          Position_slice*> (
          _tao_aggregate.pos
        )
    );
  Orientation_forany _tao_aggregate_orient
      (const_cast<
          Orientation_slice*> (
          _tao_aggregate.orient
        )
    );
  return
    (strm >> _tao_aggregate_pos) &&
    (strm >> _tao_aggregate_orient) &&
    (strm >> _tao_aggregate.buttonState);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:61


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBAGiPSiLowOrderLinearHapticModel &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.n) &&
    (strm << _tao_aggregate.m) &&
    (strm << _tao_aggregate.k) &&
    (strm << _tao_aggregate.A11) &&
    (strm << _tao_aggregate.A12) &&
    (strm << _tao_aggregate.B1) &&
    (strm << _tao_aggregate.C11) &&
    (strm << _tao_aggregate.C12) &&
    (strm << _tao_aggregate.D) &&
    (strm << _tao_aggregate.f_0) &&
    (strm << _tao_aggregate.zdot_0) &&
    (strm << _tao_aggregate.normal);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBAGiPSiLowOrderLinearHapticModel &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.n) &&
    (strm >> _tao_aggregate.m) &&
    (strm >> _tao_aggregate.k) &&
    (strm >> _tao_aggregate.A11) &&
    (strm >> _tao_aggregate.A12) &&
    (strm >> _tao_aggregate.B1) &&
    (strm >> _tao_aggregate.C11) &&
    (strm >> _tao_aggregate.C12) &&
    (strm >> _tao_aggregate.D) &&
    (strm >> _tao_aggregate.f_0) &&
    (strm >> _tao_aggregate.zdot_0) &&
    (strm >> _tao_aggregate.normal);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBAHapticInterface_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBAHapticInterface_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CORBAHapticInterface RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_CORBAHapticInterface_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBAPhantomHapticInterface_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBAPhantomHapticInterface_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CORBAPhantomHapticInterface RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_CORBAPhantomHapticInterface_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBAMouseHapticInterface_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBAMouseHapticInterface_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CORBAMouseHapticInterface RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_CORBAMouseHapticInterface_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBAHapticsManager_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBAHapticsManager_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CORBAHapticsManager RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_CORBAHapticsManager_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const CORBAOpenHapticsManager_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    CORBAOpenHapticsManager_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::CORBAOpenHapticsManager RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        _TAO_CORBAOpenHapticsManager_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



